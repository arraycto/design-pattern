
定义: 将一个类的接口转换成客户期望的另一个接口;
      使得原本接口不兼容的类可以一起工作;
      分为两大类：
           1.对象适配器：使用委托机制
           2.类适配器：是通过类继承来实现

    #类型：结构型

    #适用场景：
              1.已经存在的类，它的方法和需求不匹配时（方法结果相同或相似）；
              2.不是软件设计阶段考虑的设计模式，是随着软件维护，由于不同产品，不同厂家造成功能类似而接口不相同的情况下的解决方案；

    #注意事项：

    #优点：1.能提高类的透明性和复用，现有的类复用但不需要改变；
           2.目标类和适配器类解耦，提高程序的扩展性；
           3.符合开闭原则

    #缺点：1.可能会增加系统的复杂性;
           2.增加系统代码可读难度；

    #举例：
        适配者有点亡羊补牢的意思，是用来后期程序维护时用到的设计模式，在软件设计阶段不推荐使用该模式。

    #与其他设计模式关联：
        1.装饰者模式 && 适配器模式：装饰者模式和适配器模式都可以叫做包装模式，装饰者和被装饰者可以实现相同的接口，或者装饰者是被装饰者的子类;
                                  适配器模式中适配器和被适配的类具有不同的接口，也有可能有部分的接口重合。

        2.适配器模式 && 外观模式：都是对现有的系统封装；外观模式是定义了一个新的接口，而是配置器模式则是复用原有的接口；
                                适配器是使两个已有的接口协同工作，而外观模式是在现有的系统种提供一个更为方便的访问入口。
                                两个都可以称之为适配模式，最大的不同是：外观模式适配的力度更大。

    #源码解析：mybatis & mybatis plus中的 EntityWrapper<User> wrapper = new EntityWrapper<>();
                  wrapper.eq("ent_id",121323434l);

