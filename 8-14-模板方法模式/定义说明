
定义: 定义了一个算法的骨架，并允许子类为一个或多个步骤提供实现;
      模板方法使得子类可以在不改变算法结构的情况下，重新定义算法的某些步骤;

    #举例：
         1.往冰箱里放大象需要几步

    #类型：行为型

    #适用场景：
              1.一次性实现一个算法的不变部分，并将可变的行为留给子类来实现（往冰箱里放东西，放什么东西（水果，蔬菜..）这些可变行为交由子类实现）;
              2.各子类中公共的行为被提取出来并集中到一个公共的父类中，从而避免代码重复；

    #注意事项：

    #优点： 1.提高复用性（将所有子类中相同部分的代码放到抽象的父类中）；
           2.提高扩展性（讲不通的代码放到不同的子类中，通过扩展子类增加新的行为）；
           3.符合开闭原则（模板方法提供了很好的代码复用平台）；


    #缺点：1.类数目的增加;
           2.增加了类系统的复杂度；
           3.继承关系自身缺点，如果父类添加新的抽象方法，所有子类都要改一遍。

    #扩展：
        1.钩子方法：提供了缺省的行为，子类可以在必要时，进行扩展（是模板对子类更进一步的扩展和开放）。

        2.模板方法和工厂模式：工厂模式是模板方法的一种特殊实现 。
        3.模板方法和策略模式：策两者都有封装算法，策略模式目的是使不同的算法可以相互替换，并且不影响应用层和客户端的使用。
          而模式模式是针对算法的流程，将不太一样的东西去交给子类去实现（不改变算法流程）。



