
定义: 在不改变原有对象的基础上，将功能附加到对象上;
      提供了比继承更有弹性的替代方案（扩展原有对象功能）;

    #举例：
        房子装修，装饰墙纸，吊顶灯，铺地板等。

    #类型：结构型

    #适用场景：
              1.扩展一个类的功能或者给一个类添加附加职责；
              2.动态的给一个对象添加功能，这些功能可以再动态的撤销；

    #注意事项：

    #优点：1.继承的有力补充，比继承灵活，不改变原有对象的情况下给对象一个扩展功能；
           2.通过使用不同的装饰类以及这些装饰类的排列组合，可以实现不同的效果；
           3.符合开闭原则

    #缺点：1.会出现更多的代码，更多的类，增加程序的复杂性;
           2.动态装饰时，多层装饰时会更复杂；


    #与其他设计模式关联：
        1.装饰者模式 && 代理模式：装饰者模式关注在一个对象上动态的添加方法，而代理模式关注在控制对对象的访问。
        2.装饰者模式 && 适配器模式：装饰者模式和适配器模式都可以叫做包装模式，装饰者和被装饰者可以实现相同的接口，或者装饰者是被装饰者的子类;
                                  适配器模式中适配器和被适配的类具有不同的接口，也有可能有部分的接口重合。

    #源码解析：mybatis & mybatis plus中的 EntityWrapper<User> wrapper = new EntityWrapper<>();
              wrapper.eq("ent_id",121323434l);
