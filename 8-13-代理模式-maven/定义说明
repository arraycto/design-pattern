
定义: 为其他对象提供一种代理，以控制对这个对象的访问;
      代理对象在客户端和目标对象之间起到中介的作用;
      分类：
          1.静态代理（在代码中显示指定的代理）
          2.动态代理（jdk种动态代理实现，只能对实现接口的类生成代理，并不能针对一个具体的实现类
           （jdk只能针对接口代理，不能针对实现类代理），如果需要代理没有被实现的接口，要用cglib进行动态代理）
          3.cglib代理（对于final修饰的类无法代理）效率最高，lombox注解就是基于cglib

          4.spring的代理选择：当bean中有实现接口时，spring就会用jdk的动态代理，当bean没有实现接口时，spring就会使用cglib
                            spring强制使用cglib的配置：在spring配置中加入：<aop:aspectj-autoproxy proxy-target-class="true">

    #举例：
         1.租房子：找中介租全托管的房子，房东就是目标对象，合同草拟，水电结算都是代理类来做的。代理类就是中介，之间和中介就能签合同，不需要与房东接触。
              也就是说，中介代理了房东来和我们签合同，并对目标对象进行了一些增强，比如草拟合同，水电费结算这些功能都是对目标对象的增强（目标对象本来不具备这些功能的）
         2.spring中的aop:面向切面编程就是使用的代理模式，aop里面的before：类似于草拟合同，after:水电费结算，而要增强的就是租房子这个行为。

    #类型：结构型

    #适用场景：
              1.保护目标对象（我们租房子有可能连房东长什么样都不清楚）;
              2.增强目标对象（租房子草拟合同，水电费结算）；

    #注意事项：

    #优点： 1.代理模式能够将代理对象与真实被调用的目标对象分离；
           2.一定程度上降低了代理对象的耦合度，扩展性好；
           3.保护目标对象（在客户端和目标对象之间起到一个中介作用，代理模式能够拿到真实对象的引用，而客户端直接和代理类进行交互）；
           4.增强目标对象（before，after）；

    #缺点：1.代理模式会造成系统中设计类的数目增加;
           2.在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢；
           3.增加系统的复杂度。

    #与其他设计模式关联：
        1.代理模式和装饰者模式：装饰者模式是为对象加上行为，代理模式是控制访问，代理模式更注重通过增加代理人的方式来增强目标对象。
        2.代理模式和适配器模式：适配器模式是改变已有的接口，让他们之间相互配合。代理模式是不能改变接口行为的。



