
定义: 提供了减少对象数量从而改善应用所需的对象结构的方式;
      运用共享技术有效地支持大量细粒度的对象;
      一句话概括就是减少对象的创建数量，从而减少内存的占用，并提高性能。
      分为两大状态：
                 1.内部状态：在享元模式的内存不随环境改变而改变的部分
                 2.外部状态：在享元模式的内存随环境改变而改变的部分，是不可共享的部分。
    #类型：结构型

    #适用场景：
              1.常常用于系统底层的开发，以便解决系统的性能问题java中的string类型就是用的享元模式，如果有就返回，
                如果没有就创建一个字符串，并且保存在字符串的缓存池里面）；
              2.系统有大量的相似对象，需要缓冲池的场景；

    #注意事项：

    #优点：1.减少对象的创建，降低内存中的数量，降低系统的内存，提高效率；
           2.减少内存之外的其他内存的占用【1.时间资源(new关键字创建实例是需要消耗时间的，享元模式可以减少new实例的次数) 2.操作系统中
                文件句柄和窗口句柄也都是一种资源】；

    #缺点：1.关注内/外部状态，关注线程安全问题;
           2.使系统，程序的逻辑复杂化；

    #举例：


    #与其他设计模式关联：
        1.享元模式与单例模式区别：这三个模式为什么放一起呢。都是减少构造函数多次被构造为目的产生的模式
                      单例模式是类级别的，一个类只能有一个对象实例；
                      享元模式是对象级别的，可以有多个对象实例，多个变量引用同一个对象实例；
                      享元模式主要是为了节约内存空间，提高系统性能，而单例模式主要为了可以共享数据；


